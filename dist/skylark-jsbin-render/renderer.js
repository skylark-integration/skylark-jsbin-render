/**
 * skylark-jsbin-render - A version of jsbin-render  that ported to running on skylarkjs.
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-jsbin-render/
 * @license MIT
 */
define(["skylark-langx-async/Deferred","skylark-jquery","./jsbin"],function(o,e,n){"use strict";var r,t,i,s={},a=(e(window),e(document));return s.runner={},s.runner.origin="*",s.setup=function(o){s.runner.window=o.contentWindow,s.runner.iframe=o},s.error=function(){window.console.warn.apply(console,["Renderer:"].concat([].slice.call(arguments)))},s.handleMessage=function(o){if(o.origin){var e=o.data;if("string"==typeof e){try{e="string"==typeof o.data?JSON.parse(o.data):o.data}catch(o){return s.error("Error parsing event data:",o.message)}if("function"!=typeof s[e.type])return!1;try{s[e.type](e.data)}catch(o){s.error(o.message)}}}},s.postMessage=function(o,e){if(!s.runner.window)return s.error("postMessage: No connection to runner window.");s.runner.window.postMessage(JSON.stringify({type:o,data:e}),s.runner.origin)},s.complete=function(){try{store.sessionStorage.removeItem("runnerPending")}catch(o){}},s.loopProtectHit=function(o){var e=n.panels.named.javascript.editor;setTimeout(function(){var n=e.state.lint.annotations||[];void 0!==e.updateLinting&&((n=n.filter(function(e){return e.source!=="loopProtectLine:"+o})).push({from:CodeMirror.Pos(o-1,0),to:CodeMirror.Pos(o-1,0),message:'Exiting potential infinite loop.\nTo disable loop protection: add "// noprotect" to your code',severity:"warning",source:"loopProtectLine:"+o}),e.updateLinting(n))},e.state.lint.options.delay||0)},s.resize=(r=s.$live.find(".size"),t=throttle(function(){r.fadeOut(200)},2e3),i=!1,function(o){if(n.embed||(r.show().html(o.width+"px"),t()),n.embed&&self!==top&&!1===i){i=!0;var a=$body.outerHeight(!0)-e(s.runner.iframe).height()+o.offsetHeight;window.parent.postMessage({height:a},"*")}}),s.focus=function(){n.panels.focus(n.panels.named.live),closedropdown()},s.console=function(o){var e=o.method,n=o.args;window._console&&(window._console[e]||(e="log"),window._console[e].apply(window._console,n))},s["console:load:script:success"]=function(o){a.trigger("console:load:script:success",o)},s["console:load:script:error"]=function(o){a.trigger("console:load:script:error",o)},s["console:load:dom:success"]=function(o){a.trigger("console:load:dom:success",o)},s["console:load:dom:error"]=function(o){a.trigger("console:load:dom:error",o)},n.renderer=s});
//# sourceMappingURL=sourcemaps/renderer.js.map
